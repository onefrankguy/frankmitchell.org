<!--
Title: Shell exploits
Created: 22 April 2005 - 7:58 am
Modified: 12 May 2005 - 7:44 am
Tags: security
-->

Here are some bits of C code worth screwing around with. Taken from the [RADICL lab][]. As with any exploit, the standard disclaimer applies. Don't play with it unless you know what you're doing.

Because Andrew asked _how_ these were shell exploits, I give you the following:

<http://www.home.linuxjournal.com/article/6701>

<http://destroy.net/machines/security/P49-14-Aleph-One>

The key concept is this: a function's return address is the address of the next instruction in memory, which is executed immediately after the function returns.

Stack based:

	int main(int argc, char *argv[])
	{
		char buf[512];
		strcpy(buf, argv[1]);
		
		return 0;
	}

Using environment variables:

	int main(int argc, char *argv[])
	{
		char buf[8];
		strcpy(buf, argv[1]);
		
		return 0;
	}

Heap based:

	int main(int argc, char *argv[])
	{
		char *buf1, *buf2;
		
		buf1 = (char *)malloc(256);
		buf2 = (char *)malloc(256);
		
		printf("buffer 1 = %p\nbuffer 2 = %p\n", buf1, buf2);
		
		strcpy(buf1, argv[1]);
		free(buf2);
		
		return 0;
	}

Format string:

	int main(int argc, char *argv[])
	{
		if(argc < 2)
		{
			printf("Usage: %s <stuff>\n", argv[0]);
			exit(0);
		}
		
		printf(argv[1]);
		
		return 0;
	}

Only printable characters:

	int main(int argc, char *argv[])
	{
		char buf[256];
		int i;
		
		if(argc < 2)
		{
			printf("Usage: %s <stuff>\n", argv[0]);
			exit(0);
		}
		
		for(i = 0; i < strlen(argv[1]); i++)
		{
			if(!isprint(argv[1][i]))
			{
				printf("Only printable characters allowed!\n");
				exit(0);
			}
		}
		
		strcpy(buf, argv[1]);
		return 0;
	}

Some extensions from Andrew. The first assumes all pointers are the same size.

	int main(int argc, char **argv)		{		char buf[1];		buf[-sizeof(void *)] = main;	}

The second is really not something you want to run as root.

	#include <unistd.h>	void diedie(void)	{		unlink("/")	}
	void load(void (*fn)(void))	{		char buff[1];		buff[-sizeof(fn)] = diedie;	}
	int main(int argc, char **argv)	{		load(diedie);	}


[RADICL lab]: http://www.cs.uidaho.edu/~radicl/ "Reconfigurable Attack/Defend Instructional Computing Laboratory"